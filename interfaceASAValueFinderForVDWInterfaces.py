#################
## Created by Engin Cukuroglu
## 13 February 2012
#################

import os, sys, time
from codesOfTools import naccessRSAFileReaderOnlyAbsASADictionary


def vdwInterfaceDictionaryCreator(interface, VDWInterfaceFileDirectory):
    interfaceFileName = '%s/%s.pdb' %(VDWInterfaceFileDirectory, interface)
    interfaceFile = open(interfaceFileName, 'r')
    interfaceDict = {}
    for line in interfaceFile:
        line = line.strip()
        if line[0:4] == 'ATOM':
            chainID = line[21]
            resType = line[17:20].strip()
            resNo = line[22:26].strip()
            resKey = '%s%s%s' %(resType, resNo, chainID)
            atomType = line[12:16].strip()
            if not resKey in interfaceDict:
                interfaceDict[resKey] = 1
    return interfaceDict 

def mainInterfaceASAValueFinderForVDWInterfaces(VDWInterfaceListFileDirectory, VDWInterfaceFileDirectory, naccessResultFileDirectory, vdwInterfaceASAValuesFileDirectory, fullVDWInterfaceASAValuesFileDirectory):
    
    print('\n* INTERFACE ASA VALUE FINDER FOR VDW INTERFACES STARTED *\n')
    print('Time stamp : %s' %(time.asctime()))
    t1 = time.time()

    exValidatedVDWInterfaceASAValueDict = {}
    validatedFullVDWInterfaceASAValuesFile = open(fullVDWInterfaceASAValuesFileDirectory,'r')
    for validatedInterfaceASAInfo in validatedFullVDWInterfaceASAValuesFile:
        splittedValidatedInterfaceASAInfo = validatedInterfaceASAInfo.strip().split('\t')
        exValidatedVDWInterfaceASAValueDict[splittedValidatedInterfaceASAInfo[0]] = validatedInterfaceASAInfo.strip()
    validatedFullVDWInterfaceASAValuesFile.close()

    vdwInterfaceASAValuesFile = open(vdwInterfaceASAValuesFileDirectory, 'w')
    tempFullVDWInterfaceASAValuesFileDirectory = '%s_temp' %(fullVDWInterfaceASAValuesFileDirectory)
    tempFullVDWInterfaceASAValuesFile = open(tempFullVDWInterfaceASAValuesFileDirectory, 'w')
    interfaceListFile = open(VDWInterfaceListFileDirectory, 'r')
    for interface in interfaceListFile:
        interface = interface.strip()
        alternativeInterfaceName = '%s%s%s' %(interface[0:-2], interface[-1], interface[-2])
        chain_1 = interface[0:-1]
        chain_2 = '%s%s' %(interface[0:-2], interface[-1])
        chain_1_id = interface[-2]
        chain_2_id = interface[-1]
        
        if interface in exValidatedVDWInterfaceASAValueDict:
            tempValidatedFullInterfaceListFile.write('%s\n' %(interface))
            tempValidatedFullInterfaceTypeListFile.write('%s\n' %(exValidatedVDWInterfaceASAValueDict[interface]))
            continue
        elif alternativeInterfaceName in exValidatedVDWInterfaceASAValueDict:
            interface = alternativeInterfaceName
            tempValidatedFullInterfaceListFile.write('%s\n' %(interface))
            tempValidatedFullInterfaceTypeListFile.write('%s\n' %(exValidatedVDWInterfaceASAValueDict[interface]))
            continue
        interfaceDict = vdwInterfaceDictionaryCreator(interface, VDWInterfaceFileDirectory)
        interface_complex_asaDict = naccessRSAFileReaderOnlyAbsASADictionary(naccessResultFileDirectory, interface)
        chain_1_monomer_asaDict = naccessRSAFileReaderOnlyAbsASADictionary(naccessResultFileDirectory, chain_1)
        chain_2_monomer_asaDict = naccessRSAFileReaderOnlyAbsASADictionary(naccessResultFileDirectory, chain_2)
        chain_1_monomerTotalASAValue = 0.0
        chain_2_monomerTotalASAValue = 0.0
        chain_1_complexTotalASAValue = 0.0
        chain_2_complexTotalASAValue = 0.0

        for resKey in interfaceDict:
            chainType = resKey[-1]
            if chainType == chain_1_id:
                try:
                    chain_1_monomerTotalASAValue = chain_1_monomerTotalASAValue + float(chain_1_monomer_asaDict[resKey])
                    chain_1_complexTotalASAValue = chain_1_complexTotalASAValue + float(interface_complex_asaDict[resKey])
                except:
                    print('%s %s has not ASA value generated by NACCESS' %(interface, resKey))    
            elif chainType == chain_2_id:
                try:
                    chain_2_monomerTotalASAValue = chain_2_monomerTotalASAValue + float(chain_2_monomer_asaDict[resKey])
                    chain_2_complexTotalASAValue = chain_2_complexTotalASAValue + float(interface_complex_asaDict[resKey])
                except:
                    print('%s %s has not ASA value generated by NACCESS' %(interface, resKey))    
            else:
                print('ERROR: chainType did not match with the interface chain types - resKey = %s interface = %s' %(resKey, interface))

        interfaceASAValue = chain_1_monomerTotalASAValue + chain_2_monomerTotalASAValue - chain_1_complexTotalASAValue - chain_2_complexTotalASAValue
        vdwInterfaceASAValuesFile.write('%s\t%s\t%s\t%f\t%f\t%f\t%f\t%f\n' %(interface, chain_1, chain_2, chain_1_monomerTotalASAValue, chain_2_monomerTotalASAValue, chain_1_complexTotalASAValue, chain_2_complexTotalASAValue, interfaceASAValue))
        tempFullVDWInterfaceASAValuesFile.write('%s\t%s\t%s\t%f\t%f\t%f\t%f\t%f\n' %(interface, chain_1, chain_2, chain_1_monomerTotalASAValue, chain_2_monomerTotalASAValue, chain_1_complexTotalASAValue, chain_2_complexTotalASAValue, interfaceASAValue))

    vdwInterfaceASAValuesFile.close()
    tempFullVDWInterfaceASAValuesFile.close()

    os.system('mv %s %s' %(tempFullVDWInterfaceASAValuesFile, fullVDWInterfaceASAValuesFile))

    t2 = time.time()
    print('Elapsed time = %f seconds\n' %(t2-t1))
    print('Time stamp : %s' %(time.asctime()))
    print('\n* INTERFACE ASA VALUE FINDER FOR VDW INTERFACES COMPLETED*\n')
