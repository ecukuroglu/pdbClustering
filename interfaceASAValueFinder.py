#################
## Created by Engin Cukuroglu
## 22 January 2014
#################

import os, sys, time
import multiprocessing
from multiprocessing import Queue, Process
from codesOfTools import interfaceNameSorter, naccessRSAFileReaderReturnOnlyAbsASADictionary, vdwInterfaceDictionaryCreator

def naccessASAWork(taskQueue_naccessASADict, naccessASAInfoResultsQueue, naccessASAErrorQueue):
    while True:
        pdbName, pdbInterfaceDict = taskQueue_naccessASADict.get()
        taskQueue_naccessASADict.task_done()
        if pdbName == None:
            break
        overallASADict = {}
        for interface in pdbInterfaceDict:
            pdbName, chain_1, chain_2, allChains, interfaceResidueStatusOfChains, interface, commonChainCounter = interfaceNameSorter(interface)
            interfaceDict = vdwInterfaceDictionaryCreator(pdbInterfaceDict[interface][0])
            if len(interfaceDict) == 0:
                interfaceNaccessResultText = '%s\t2\t%s\t%s\tThere is not any interface residue between the chains %s and %s.\n' %(interface, chain_1, chain_2, chain_1, chain_2)
                naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                naccessASAErrorQueue.put(interfaceNaccessResultText)
                continue
            if chain_1 in overallASADict:
                chain_1_monomer_asaDict = overallASADict[chain_1]
            else:
                chain_1_monomer_asaDict = naccessRSAFileReaderReturnOnlyAbsASADictionary(pdbInterfaceDict[interface][1])
                overallASADict[chain_1] = chain_1_monomer_asaDict
            if len(chain_1_monomer_asaDict) == 0:
                interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain %s monomer ASA values are not generated by NACCESS\n' %(interface, chain_1, chain_2, chain_1)
                naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                naccessASAErrorQueue.put(interfaceNaccessResultText)
                continue
            if chain_2 in overallASADict:
                chain_2_monomer_asaDict = overallASADict[chain_2]
            else:
                chain_2_monomer_asaDict = naccessRSAFileReaderReturnOnlyAbsASADictionary(pdbInterfaceDict[interface][2])
                overallASADict[chain_2] = chain_2_monomer_asaDict
            if len(chain_2_monomer_asaDict) == 0:
                interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain %s monomer ASA values are not generated by NACCESS\n' %(interface, chain_1, chain_2, chain_2)
                naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                naccessASAErrorQueue.put(interfaceNaccessResultText)
                continue
            if allChains in overallASADict:
                interface_complex_asaDict = overallASADict[allChains]
            else:
                interface_complex_asaDict = naccessRSAFileReaderReturnOnlyAbsASADictionary(pdbInterfaceDict[interface][3])
                overallASADict[allChains] = interface_complex_asaDict
            if len(interface_complex_asaDict) == 0:
                interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain %s complex ASA values are not generated by NACCESS\n' %(interface, chain_1, chain_2, allChains)
                naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                naccessASAErrorQueue.put(interfaceNaccessResultText)
                continue

            errorStatus = 0
            interfaceChainDict = {}
            for chainID in chain_1:
                interfaceChainDict[chainID] = {}
                interfaceChainDict[chainID]['monomerTotalASAValue'] = 0.0
                interfaceChainDict[chainID]['complexTotalASAValue'] = 0.0
            for chainID in chain_2:
                interfaceChainDict[chainID] = {}
                interfaceChainDict[chainID]['monomerTotalASAValue'] = 0.0
                interfaceChainDict[chainID]['complexTotalASAValue'] = 0.0
            for resKey in interfaceDict:
                chainID = resKey[-1]
                if chainID in chain_1:
                    try:
                        interfaceChainDict[chainID]['monomerTotalASAValue'] = interfaceChainDict[chainID]['monomerTotalASAValue'] + float(chain_1_monomer_asaDict[resKey])
                        interfaceChainDict[chainID]['complexTotalASAValue'] = interfaceChainDict[chainID]['complexTotalASAValue']  + float(interface_complex_asaDict[resKey])
                    except:
                        interfaceNaccessResultText = '%s\t2\t%s\t%s\t%s has not ASA value generated by NACCESS\n' %(interface, chain_1, chain_2, resKey)
                        naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                        naccessASAErrorQueue.put(interfaceNaccessResultText)
                        errorStatus = 1
                        break
                elif chainID in chain_2:
                    try:
                        interfaceChainDict[chainID]['monomerTotalASAValue'] = interfaceChainDict[chainID]['monomerTotalASAValue'] + float(chain_2_monomer_asaDict[resKey])
                        interfaceChainDict[chainID]['complexTotalASAValue'] = interfaceChainDict[chainID]['complexTotalASAValue']  + float(interface_complex_asaDict[resKey])
                    except:
                        interfaceNaccessResultText = '%s\t2\t%s\t%s\t%s has not ASA value generated by NACCESS\n' %(interface, chain_1, chain_2, resKey)
                        naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                        naccessASAErrorQueue.put(interfaceNaccessResultText)
                        errorStatus = 1
                        break
                else:
                    interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain type did not match with the interface chain ids - reskey = %s\n' %(interface, chain_1, chain_2, resKey)
                    naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                    naccessASAErrorQueue.put(interfaceNaccessResultText)
                    errorStatus = 1
                    break
            if errorStatus == 0:
                totalInterfaceASA = 0.0
                chain_1_monomerTotalASAString = '%.2f' %(interfaceChainDict[chain_1[0]]['monomerTotalASAValue'])
                chain_1_complexTotalASAString = '%.2f' %(interfaceChainDict[chain_1[0]]['complexTotalASAValue'])
                chain_1_interfaceASAString = '%.2f' %(interfaceChainDict[chain_1[0]]['monomerTotalASAValue'] - interfaceChainDict[chain_1[0]]['complexTotalASAValue'])
                totalInterfaceASA = totalInterfaceASA + interfaceChainDict[chain_1[0]]['monomerTotalASAValue'] - interfaceChainDict[chain_1[0]]['complexTotalASAValue']
                for i in list(range(1,len(chain_1))): 
                    chain_1_monomerTotalASAString = '%s,%.2f' %(chain_1_monomerTotalASAString, interfaceChainDict[chain_1[i]]['monomerTotalASAValue'])
                    chain_1_complexTotalASAString = '%s,%.2f' %(chain_1_complexTotalASAString, interfaceChainDict[chain_1[i]]['complexTotalASAValue'])
                    chain_1_interfaceASAString = '%s,%.2f' %(chain_1_interfaceASAString, interfaceChainDict[chain_1[i]]['monomerTotalASAValue'] - interfaceChainDict[chain_1[i]]['complexTotalASAValue'])
                    totalInterfaceASA = totalInterfaceASA + interfaceChainDict[chain_1[i]]['monomerTotalASAValue'] - interfaceChainDict[chain_1[i]]['complexTotalASAValue']
                chain_2_monomerTotalASAString = '%.2f' %(interfaceChainDict[chain_2[0]]['monomerTotalASAValue'])
                chain_2_complexTotalASAString = '%.2f' %(interfaceChainDict[chain_2[0]]['complexTotalASAValue'])
                chain_2_interfaceASAString = '%.2f' %(interfaceChainDict[chain_2[0]]['monomerTotalASAValue'] - interfaceChainDict[chain_2[0]]['complexTotalASAValue'])
                totalInterfaceASA = totalInterfaceASA + interfaceChainDict[chain_2[0]]['monomerTotalASAValue'] - interfaceChainDict[chain_2[0]]['complexTotalASAValue']
                for i in list(range(1,len(chain_2))): 
                    chain_2_monomerTotalASAString = '%s,%.2f' %(chain_2_monomerTotalASAString, interfaceChainDict[chain_2[i]]['monomerTotalASAValue'])
                    chain_2_complexTotalASAString = '%s,%.2f' %(chain_2_complexTotalASAString, interfaceChainDict[chain_2[i]]['complexTotalASAValue'])
                    chain_2_interfaceASAString = '%s,%.2f' %(chain_2_interfaceASAString, interfaceChainDict[chain_2[i]]['monomerTotalASAValue'] - interfaceChainDict[chain_2[i]]['complexTotalASAValue'])
                    totalInterfaceASA = totalInterfaceASA + interfaceChainDict[chain_2[i]]['monomerTotalASAValue'] - interfaceChainDict[chain_2[i]]['complexTotalASAValue']
                interfaceNaccessResultText = '%s\t0\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%.2f\n' %(interface, chain_1, chain_2, chain_1_monomerTotalASAString, chain_2_monomerTotalASAString, chain_1_complexTotalASAString, chain_2_complexTotalASAString, chain_1_interfaceASAString, chain_2_interfaceASAString, totalInterfaceASA)
                naccessASAInfoResultsQueue.put(interfaceNaccessResultText)

def mainInterfaceASAValueFinder(interfaceListFileDirectory, interfaceFilesDirectory, naccessResultsFileDirectory, vdwInterfaceASAValuesFileDirectory, fullVDWInterfaceASAValuesFileDirectory, interfaceASAExtractionLogFileDirectory, numberOfProcesses):
    
    print('\n* INTERFACE ASA VALUE FINDER STARTED *\n')
    print('Time stamp : %s' %(time.asctime()))
    t1 = time.time()

    if not os.path.exists(interfaceListFileDirectory):
        sys.exit('\nThe %s does not exist.\n' %(interfaceListFileDirectory))

    if not os.path.exists(interfaceFilesDirectory):
        sys.exit('\nThe %s does not exist.\n' %(interfaceFilesDirectory))

    if not os.path.exists(naccessResultsFileDirectory):
        sys.exit('\nThe %s does not exist.\n' %(naccessResultsFileDirectory))

    fullVDWInterfaceASAValueDict = {}
    if os.path.exists(fullVDWInterfaceASAValuesFileDirectory):
        fullVDWInterfaceASAValuesFile = open(fullVDWInterfaceASAValuesFileDirectory, 'r')
        for interfaceASAEntry in fullVDWInterfaceASAValuesFile:
            splittedInterfaceASAEntry = interfaceASAEntry.strip().split('\t')
            fullVDWInterfaceASAValueDict[splittedInterfaceASAEntry[0]] = [splittedInterfaceASAEntry[1], interfaceASAEntry]
        fullVDWInterfaceASAValuesFile.close()

    numberOfExistedInterfaceASAInfo = 0
    totalNumberOfInterfaces = 0
    taskDict = {}
    naccessASAInfoResultsQueue = multiprocessing.Queue()
    interfaceListFile = open(interfaceListFileDirectory, 'r')
    fullInterfaceDict = {}
    for interface in interfaceListFile:
        interface = interface.strip()
        if interface == '':
            continue
        totalNumberOfInterfaces = totalNumberOfInterfaces + 1
        fullInterfaceDict[interface] = 1
        pdbName, chain_1, chain_2, allChains, interfaceResidueStatusOfChains, interface, commonChainCounter = interfaceNameSorter(interface)

        if len(chain_1) == 0:
            interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain 1 does not have any monomer.\n' %(interface, chain_1, chain_2)
            naccessASAInfoResultsQueue.put(interfaceNaccessResultText)    
            continue
        if len(chain_2) == 0:
            interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain 2 does not have any monomer.\n' %(interface, chain_1, chain_2)
            naccessASAInfoResultsQueue.put(interfaceNaccessResultText)    
            continue
        if commonChainCounter > 0:
            interfaceNaccessResultText = '%s\t2\t%s\t%s\tChain 1 and Chain 2 have %d common monomer.\n' %(interface, chain_1, chain_2, commonChainCounter)
            naccessASAInfoResultsQueue.put(interfaceNaccessResultText)    
            continue
        if interface in fullVDWInterfaceASAValueDict:
            if int(fullVDWInterfaceASAValueDict[interface][0]) == 0:
                interfaceNaccessResultText = fullVDWInterfaceASAValueDict[interface][1]
                naccessASAInfoResultsQueue.put(interfaceNaccessResultText)
                continue        
                
        chain_1_name = '%s_%s' %(pdbName, chain_1)
        chain_2_name = '%s_%s' %(pdbName, chain_2)
        allChainsName = '%s_%s' %(pdbName, allChains)

        naccessRSAFileDirectoryWith_chain_1 = '%s/%s.rsa' %(naccessResultsFileDirectory, chain_1_name)
        naccessRSAFileDirectoryWith_chain_2 = '%s/%s.rsa' %(naccessResultsFileDirectory, chain_2_name)
        naccessRSAFileDirectoryWith_allChains = '%s/%s.rsa' %(naccessResultsFileDirectory, allChainsName)

        interfaceFileDirectory = '%s/%s.pdb' %(interfaceFilesDirectory, interface)
        if pdbName in taskDict:
            if interface in taskDict[pdbName]:
                totalNumberOfInterfaces = totalNumberOfInterfaces - 1
            else:
                taskDict[pdbName][interface] = [interfaceFileDirectory, naccessRSAFileDirectoryWith_chain_1, naccessRSAFileDirectoryWith_chain_2, naccessRSAFileDirectoryWith_allChains]
        else:
            taskDict[pdbName] = {}
            taskDict[pdbName][interface] = [interfaceFileDirectory, naccessRSAFileDirectoryWith_chain_1, naccessRSAFileDirectoryWith_chain_2, naccessRSAFileDirectoryWith_allChains]
    interfaceListFile.close()
            
    taskQueue_naccessASADict = multiprocessing.JoinableQueue()
    naccessASAErrorQueue = multiprocessing.Manager().Queue()
    generateNaccessASAWorkers = [Process(target=naccessASAWork, args=(taskQueue_naccessASADict, naccessASAInfoResultsQueue, naccessASAErrorQueue)) for i in range(numberOfProcesses)]    
    for tempWorker in generateNaccessASAWorkers:
        tempWorker.start()

    for pdbName in taskDict:
        taskQueue_naccessASADict.put([pdbName, taskDict[pdbName]])
    for i in range(numberOfProcesses):
        taskQueue_naccessASADict.put([None, None])

    taskQueue_naccessASADict.join()    

    vdwInterfaceASAValuesFile = open(vdwInterfaceASAValuesFileDirectory, 'w')
    naccessASAResultDict = {}
    tempTotalNumberOfInterfaces = totalNumberOfInterfaces
    while tempTotalNumberOfInterfaces:
        interfaceNaccessResultString = naccessASAInfoResultsQueue.get()
        splittedInterfaceNaccessResultString = interfaceNaccessResultString.strip().split('\t')
        naccessASAResultDict[splittedInterfaceNaccessResultString[0]] = [0, splittedInterfaceNaccessResultString[1], interfaceNaccessResultString]
        vdwInterfaceASAValuesFile.write(interfaceNaccessResultString)
        tempTotalNumberOfInterfaces = tempTotalNumberOfInterfaces -1
    vdwInterfaceASAValuesFile.close()

    naccessASAErrorQueue.put(None)
    interfaceASAExtractionLogFile = open(interfaceASAExtractionLogFileDirectory, 'w')
    while True:
        naccessASAErrorEntry = naccessASAErrorQueue.get()
        if naccessASAErrorEntry == None:
            break
        interfaceASAExtractionLogFile.write(naccessASAErrorEntry)
    interfaceASAExtractionLogFile.close()
    
    tempFullVDWInterfaceASAValuesFileDirectory = '%s_temp' %(fullVDWInterfaceASAValuesFileDirectory)
    tempFullVDWInterfaceASAValuesFile = open(tempFullVDWInterfaceASAValuesFileDirectory, 'w')
    if os.path.exists(fullVDWInterfaceASAValuesFileDirectory):
        fullVDWInterfaceASAValuesFile = open(fullVDWInterfaceASAValuesFileDirectory, 'r')
        for interfaceASAResultLine in fullVDWInterfaceASAValuesFile:
            splittedInterfaceASAResultLine = interfaceASAResultLine.strip().split('\t')
            interface = splittedInterfaceASAResultLine[0]
            if interface in fullInterfaceDict:
                if interface in naccessASAResultDict:
                    naccessASAResultDict[interface][0] = 1
                    if splittedInterfaceASAResultLine[1] >= naccessASAResultDict[interface][1]:
                        tempFullVDWInterfaceASAValuesFile.write(naccessASAResultDict[interface][2])
                    else:
                        tempFullVDWInterfaceASAValuesFile.write(interfaceASAResultLine)
                else:
                    tempFullVDWInterfaceASAValuesFile.write(interfaceASAResultLine)
        fullVDWInterfaceASAValuesFile.close()
        for interface in naccessASAResultDict:
            if naccessASAResultDict[interface][0] == 0:
                tempFullVDWInterfaceASAValuesFile.write(naccessASAResultDict[interface][2])
    else:
        for interface in naccessASAResultDict:
            tempFullVDWInterfaceASAValuesFile.write(naccessASAResultDict[interface][2])
    tempFullVDWInterfaceASAValuesFile.close()
    os.system('mv %s %s' %(tempFullVDWInterfaceASAValuesFileDirectory, fullVDWInterfaceASAValuesFileDirectory))

    t2 = time.time()
    print('Elapsed time = %f seconds\n' %(t2-t1))
    print('Time stamp : %s' %(time.asctime()))
    print('\n* INTERFACE ASA VALUE FINDER COMPLETED *\n')
